@page "/Reporte/Nuevo"
@inject NavigationManager NavMan
@inject IJSRuntime JSx
@rendermode InteractiveServer
@using System.Text.Json

<h3>Nuevo Registro </h3>


<EditForm Model="@Registro" OnValidSubmit="GuardarReporte">
    <DataAnnotationsValidator />

    <div>
        <label for="matricula" class="form-label">Matricula: (Campo obligatorio):</label>
        <InputTextArea id="matricula" @bind-Value="Registro.matricula" class="form-control" />
    </div>
   
   
    <div>
        <label for="nombre" class="form-label">Nombre: (Campo obligatorio):</label>
        <InputTextArea id="nombre" @bind-Value="Registro.nombre" class="form-control" />
    </div>

    
    <div>
        <label for="apellido" class="form-label">Apellido: (Campo obligatorio):</label>
        <InputTextArea id="apellido" @bind-Value="Registro.apellido" class="form-control" />
    </div>

    
    <div>
        <label for="curso" class="form-label">Curso: </label>
        <InputTextArea id="curso" @bind-Value="Registro.curso" class="form-control" />
    </div>

    
    <div>
        <label for="motivo" class="form-label">Motivo: (Campo obligatorio):</label>
        <InputTextArea id="motivo" @bind-Value="Registro.motivo" class="form-control" />
    </div>

    <div class="mt-3">
        <button type="submit" class="btn btn-success">Guardar</button>
        <button type="button" class="btn btn-danger" @onclick="Regresar">Cancelar</button>
    </div>

</EditForm>



@code {

    [Parameter]
    public string? Id {get; set;} = null;
    private Reporte Registro = new Reporte();
    List<Reporte> Registros = new List<Reporte>();

    private void GuardarReporte()
    {
        if(string.IsNullOrEmpty(Registro.Id)){
             Registros.Add(Registro);
             Registro.Id = Guid.NewGuid().ToString();

        }else{
            var index = Registros.FindIndex(x => x.Id == Registro.Id);
            Registros[index] = Registro;
        }
        JSx.InvokeVoidAsync("localStorage.setItem", "Registros", JsonSerializer.Serialize(Registros));
        NavMan.NavigateTo("/");
    }

    

    private void Regresar()
    {
        NavMan.NavigateTo("/");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender)
        {
            var RegistrosJson = await JSx.InvokeAsync<string>("localStorage.getItem", "Registros");
            if(RegistrosJson != null)
            {
                Registros = JsonSerializer.Deserialize<List<Reporte>>(RegistrosJson);

                if(Id != null){
                    Registro = Registros.FirstOrDefault(r => r.Id == Id)?? new Reporte();
                }
                StateHasChanged();
            }
        }
    }
   
}

